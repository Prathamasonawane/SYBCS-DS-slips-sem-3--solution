/* Write a C program to check whether the contents of two stacks are
identical. Use stack library to perform basic stack operations. Neither
stack should be changed. */



#include<stdio.h>
#include<stdlib.h>
#define MAX 10
struct stack
{
	int a[MAX];
	int top;
	}s1,s2;
	void init(struct stack *s)
	{
	s->top=-1;
	}
	int isempty(struct stack *s)
	{
	if(s->top==-1)
	return 1;
	else
	return 0;
	}
	int isfull(struct stack *s)
	{
	if(s->top==MAX-1)
	return 1;
	else
	return 0;
	}
	void push(struct stack *s,int num)
	{
	if(isfull(s))
	printf("stack is overflow:");
	else
	{
	s->top++;
	s->a[s->top]=num;
	}
}
	int pop(struct stack *s)
	{
	int val;
	if(isempty(s))
	printf("\n stack is empty:");
	else
	{
	val=s->a[s->top];
	s->top--;
	}
	return val;
	}
	int main()
	{
	int i,ch,n1,n2,val;
	init(&s1);
	init(&s2);
	printf("enter limit of stack1 ");
	scanf("%d",&n1);
	for(i=0;i<n1;i++)
	{
	printf("enter value in stack 1:");
	scanf("%d",&val);
	push(&s1,val);
	}
	printf("enter limit of stack2 ");
	scanf("%d",&n2);
	for(i=0;i<n2;i++)
	{
	printf("enter value in stack 2:");
	scanf("%d",&val);
	push(&s2,val);
	}
	while(!isempty(&s1) &&(!isempty(&s2)))
	{
	if(pop(&s1)!=pop(&s2))
	break;
	}
	if(isempty(&s1) &&(isempty(&s2)))
	printf("indentical:");
	else
	printf("\n not identical:");
	}
	
	
